package com.apu.appointwell.gui;

import com.apu.appointwell.classes.auth.AuthenticationManager;
import com.apu.appointwell.classes.utils.ImageUtils;
import com.apu.appointwell.classes.utils.SwingUtils;
import com.apu.appointwell.classes.validators.InputValidation;
import com.apu.appointwell.classes.timetable.Timeslot;
import com.apu.appointwell.classes.timetable.TimeslotFileHandler;
import com.apu.appointwell.classes.users.staff.doctor.Doctor;
import com.apu.appointwell.classes.users.staff.doctor.DoctorFileHandler;
import com.apu.appointwell.classes.utils.DialogsUI;
import com.apu.appointwell.classes.utils.FileUtils;
import com.apu.appointwell.classes.validators.DataValidation;
import java.awt.Color;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.Set;
import javax.swing.BorderFactory;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Alex
 */
public class StaffForm extends javax.swing.JFrame {

    private static final String DOCTOR_FILEPATH = "D:\\AppointWell\\src\\main\\java\\com\\apu\\appointwell\\data\\doctors.txt";
    private static final String TIMESLOT_FILEPATH = "D:\\AppointWell\\src\\main\\java\\com\\apu\\appointwell\\data\\timeslots.txt";
    private static final String APPOINTMENT_FILEPATH = "D:\\AppointWell\\src\\main\\java\\com\\apu\\appointwell\\data\\appointments.txt";
    
    // Instantiate utility classes
    ImageUtils imageUtils = new ImageUtils();
    FileUtils fileUtils = new FileUtils();
    SwingUtils swingUtils = new SwingUtils();
    DialogsUI dialogsUI = new DialogsUI();
    
    // Instantiate authentication management class
    AuthenticationManager authManager = new AuthenticationManager();
    
    // Instantiate validation class
    InputValidation inputValidation = new InputValidation();
    DataValidation dataValidation = new DataValidation();

    // Instantiate various file handler classes
    TimeslotFileHandler timeslotFileHandler = new TimeslotFileHandler();
    DoctorFileHandler doctorFileHandler = new DoctorFileHandler();
    
    /**
     * Creates new form Staff
     */
    public StaffForm() {
        initComponents();
        initCustomComponents();
    }
    
    private void initCustomComponents() {
        imageUtils.setFrameIcon(this, "/icons/medical-appointment.png");

        // Populate Timetable Table
        fileUtils.populateTableFromFile(TIMESLOT_FILEPATH, timeslotTable);
        
        // Populate Doctor Table
        fileUtils.populateTableFromFile(DOCTOR_FILEPATH, doctorTable);
        
        // Populate Home Panel Table
        populateTodayAppointmentsTable();
        
        // Populate All Currently Booked Appointments Table
        populateBookedAppointmentListTable();
        
        // Populate patients appointment history
        populatePatientAppointmentHistoryTable();
        
        // Center table values
        swingUtils.centerTableValues(doctorTable);
        swingUtils.centerTableValues(timeslotTable);
        swingUtils.centerTableValues(currentAppointmentsTable);
        swingUtils.centerTableValues(appointmentListTable);
        swingUtils.centerTableValues(patientsAppointmentHistoryTable);
        
        // Populate values for combo boxes
        populateTimeslotAvailabilityComboBox();
        populateDoctorComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doctorGenderBtnGroup = new javax.swing.ButtonGroup();
        sidePanel = new javax.swing.JPanel();
        homeSidePanel = new javax.swing.JPanel();
        sidebarMenuLabel = new javax.swing.JLabel();
        timetableSidePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        appointmentSidePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        patientSidePanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        doctorSidePanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        topBarPanel = new javax.swing.JPanel();
        logoutBtn = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();
        homePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        currentAppointmentsTable = new javax.swing.JTable();
        timetableHomePanel = new javax.swing.JPanel();
        timeslotContentPanel = new javax.swing.JPanel();
        timeslotCrudOperations = new javax.swing.JPanel();
        timeslotCrudPanel = new javax.swing.JPanel();
        deleteTimeslotBtn = new javax.swing.JButton();
        updateTimeslotBtn = new javax.swing.JButton();
        addTimeslotBtn = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        appointmentDatePicker = new com.toedter.calendar.JDateChooser();
        jLabel26 = new javax.swing.JLabel();
        appointmentTimePicker = new com.github.lgooddatepicker.components.TimePicker();
        jLabel27 = new javax.swing.JLabel();
        appointmentAvailabilityComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        doctorComboBox = new javax.swing.JComboBox<>();
        timeslotListTable = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        timeslotTable = new javax.swing.JTable();
        doctorHomePanel = new javax.swing.JPanel();
        doctorContentPanel = new javax.swing.JPanel();
        doctorListTablePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        doctorCrudPanel = new javax.swing.JPanel();
        addDoctorBtn = new javax.swing.JButton();
        updateDoctorBtn = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        doctorNameTxtField = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        maleDoctorRadiotButton = new javax.swing.JRadioButton();
        femaleDoctorRadioButton = new javax.swing.JRadioButton();
        jLabel30 = new javax.swing.JLabel();
        doctorDOB = new com.toedter.calendar.JDateChooser();
        jLabel31 = new javax.swing.JLabel();
        specialtyTxtField = new javax.swing.JTextField();
        deleteDoctorBtn = new javax.swing.JButton();
        appointmentsHomePanel = new javax.swing.JPanel();
        appointmentsContentPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        appointmentNumberTxtField = new javax.swing.JTextField();
        cancelAppointmentBtn = new javax.swing.JButton();
        confirmAppointmentBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        appointmentListTable = new javax.swing.JTable();
        patientsMedicalHistoryHomePanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        medicalRecordFilterTxtField = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        patientsAppointmentHistoryTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Staff Home Dashboard - AppointWell");

        sidePanel.setBackground(new java.awt.Color(204, 255, 255));
        sidePanel.setPreferredSize(new java.awt.Dimension(200, 720));

        homeSidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.lightGray, null));
        homeSidePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homeSidePanel.setOpaque(false);
        homeSidePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                homeSidePanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                homeSidePanelMouseReleased(evt);
            }
        });
        homeSidePanel.setLayout(new java.awt.BorderLayout());

        sidebarMenuLabel.setFont(new java.awt.Font("Verdana", 1, 20)); // NOI18N
        sidebarMenuLabel.setForeground(new java.awt.Color(0, 0, 0));
        sidebarMenuLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sidebarMenuLabel.setText("HOME");
        homeSidePanel.add(sidebarMenuLabel, java.awt.BorderLayout.CENTER);

        timetableSidePanel.setBackground(new java.awt.Color(255, 204, 204));
        timetableSidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.lightGray, null));
        timetableSidePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        timetableSidePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                timetableSidePanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                timetableSidePanelMouseReleased(evt);
            }
        });
        timetableSidePanel.setLayout(new java.awt.BorderLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/timetable-icon.png"))); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(48, 85));
        timetableSidePanel.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("TIMETABLE");
        timetableSidePanel.add(jLabel2, java.awt.BorderLayout.CENTER);

        appointmentSidePanel.setBackground(new java.awt.Color(255, 204, 204));
        appointmentSidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.lightGray, null));
        appointmentSidePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        appointmentSidePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                appointmentSidePanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                appointmentSidePanelMouseReleased(evt);
            }
        });
        appointmentSidePanel.setLayout(new java.awt.BorderLayout());

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/appointment-icon.png"))); // NOI18N
        jLabel3.setPreferredSize(new java.awt.Dimension(48, 85));
        appointmentSidePanel.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("APPOINTMENT");
        appointmentSidePanel.add(jLabel4, java.awt.BorderLayout.CENTER);

        patientSidePanel.setBackground(new java.awt.Color(255, 204, 204));
        patientSidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.lightGray, null));
        patientSidePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        patientSidePanel.setPreferredSize(new java.awt.Dimension(100, 85));
        patientSidePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                patientSidePanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                patientSidePanelMouseReleased(evt);
            }
        });
        patientSidePanel.setLayout(new java.awt.BorderLayout());

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/patient-icon.png"))); // NOI18N
        jLabel5.setPreferredSize(new java.awt.Dimension(48, 85));
        patientSidePanel.add(jLabel5, java.awt.BorderLayout.PAGE_START);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("PATIENT");
        patientSidePanel.add(jLabel6, java.awt.BorderLayout.CENTER);

        doctorSidePanel.setBackground(new java.awt.Color(255, 204, 204));
        doctorSidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.lightGray, null));
        doctorSidePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        doctorSidePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                doctorSidePanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                doctorSidePanelMouseReleased(evt);
            }
        });
        doctorSidePanel.setLayout(new java.awt.BorderLayout());

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/doctor-icon.png"))); // NOI18N
        jLabel7.setPreferredSize(new java.awt.Dimension(48, 85));
        doctorSidePanel.add(jLabel7, java.awt.BorderLayout.PAGE_START);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("DOCTOR");
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        doctorSidePanel.add(jLabel8, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homeSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(timetableSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(appointmentSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
            .addComponent(patientSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(doctorSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addComponent(homeSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(timetableSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(appointmentSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(patientSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(doctorSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
        );

        getContentPane().add(sidePanel, java.awt.BorderLayout.LINE_START);

        mainPanel.setLayout(new java.awt.BorderLayout());

        topBarPanel.setBackground(new java.awt.Color(255, 204, 204));
        topBarPanel.setPreferredSize(new java.awt.Dimension(1097, 100));

        logoutBtn.setFont(new java.awt.Font("Verdana", 1, 20)); // NOI18N
        logoutBtn.setForeground(new java.awt.Color(0, 0, 0));
        logoutBtn.setText("Logout");
        logoutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutBtn.setFocusPainted(false);
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topBarPanelLayout = new javax.swing.GroupLayout(topBarPanel);
        topBarPanel.setLayout(topBarPanelLayout);
        topBarPanelLayout.setHorizontalGroup(
            topBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topBarPanelLayout.createSequentialGroup()
                .addContainerGap(940, Short.MAX_VALUE)
                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        topBarPanelLayout.setVerticalGroup(
            topBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topBarPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        mainPanel.add(topBarPanel, java.awt.BorderLayout.PAGE_START);

        contentPanel.setLayout(new java.awt.CardLayout());

        homePanel.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Today's Appointment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        currentAppointmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Appointment No.", "Patient", "Doctor", "Appointment Time", "Visit Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currentAppointmentsTable.setRowHeight(40);
        jScrollPane1.setViewportView(currentAppointmentsTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1073, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        homePanel.add(jPanel1, java.awt.BorderLayout.CENTER);

        contentPanel.add(homePanel, "homePanel");

        timetableHomePanel.setLayout(new java.awt.BorderLayout());

        timeslotCrudOperations.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Timeslot Operation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        timeslotCrudPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        deleteTimeslotBtn.setBackground(new java.awt.Color(255, 0, 0));
        deleteTimeslotBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteTimeslotBtn.setForeground(new java.awt.Color(0, 0, 0));
        deleteTimeslotBtn.setText("Delete Timeslot");
        deleteTimeslotBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteTimeslotBtn.setFocusPainted(false);
        deleteTimeslotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTimeslotBtnActionPerformed(evt);
            }
        });
        timeslotCrudPanel.add(deleteTimeslotBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(905, 190, 150, 40));

        updateTimeslotBtn.setBackground(new java.awt.Color(255, 153, 0));
        updateTimeslotBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateTimeslotBtn.setForeground(new java.awt.Color(0, 0, 0));
        updateTimeslotBtn.setText("Update Timeslot");
        updateTimeslotBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateTimeslotBtn.setFocusPainted(false);
        updateTimeslotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTimeslotBtnActionPerformed(evt);
            }
        });
        timeslotCrudPanel.add(updateTimeslotBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(905, 110, 150, 40));

        addTimeslotBtn.setBackground(new java.awt.Color(0, 153, 255));
        addTimeslotBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addTimeslotBtn.setForeground(new java.awt.Color(0, 0, 0));
        addTimeslotBtn.setText("Add Timeslot");
        addTimeslotBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addTimeslotBtn.setFocusPainted(false);
        addTimeslotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTimeslotBtnActionPerformed(evt);
            }
        });
        timeslotCrudPanel.add(addTimeslotBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(905, 30, 150, 40));

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel25.setText("Appointment Date:");
        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        timeslotCrudPanel.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 140, 29));
        timeslotCrudPanel.add(appointmentDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 45, 180, 40));

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel26.setText("Appointment Time:");
        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        timeslotCrudPanel.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 50, 140, 29));
        timeslotCrudPanel.add(appointmentTimePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 45, 180, 40));

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel27.setText("Availability:");
        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        timeslotCrudPanel.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 100, 29));

        appointmentAvailabilityComboBox.setForeground(new java.awt.Color(0, 0, 0));
        timeslotCrudPanel.add(appointmentAvailabilityComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 155, 180, 40));

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Doctor Available:");
        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        timeslotCrudPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 160, 130, 29));

        timeslotCrudPanel.add(doctorComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 155, 180, 40));

        javax.swing.GroupLayout timeslotCrudOperationsLayout = new javax.swing.GroupLayout(timeslotCrudOperations);
        timeslotCrudOperations.setLayout(timeslotCrudOperationsLayout);
        timeslotCrudOperationsLayout.setHorizontalGroup(
            timeslotCrudOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeslotCrudOperationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timeslotCrudPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1073, Short.MAX_VALUE)
                .addContainerGap())
        );
        timeslotCrudOperationsLayout.setVerticalGroup(
            timeslotCrudOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeslotCrudOperationsLayout.createSequentialGroup()
                .addComponent(timeslotCrudPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addContainerGap())
        );

        timeslotListTable.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "List of Timeslots", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        timeslotTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Appointment Date", "Appointment Time", "Availability", "Doctor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        timeslotTable.setForeground(new java.awt.Color(0, 0, 0));
        timeslotTable.setRowHeight(40);
        timeslotTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeslotTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(timeslotTable);

        javax.swing.GroupLayout timeslotListTableLayout = new javax.swing.GroupLayout(timeslotListTable);
        timeslotListTable.setLayout(timeslotListTableLayout);
        timeslotListTableLayout.setHorizontalGroup(
            timeslotListTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeslotListTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
        );
        timeslotListTableLayout.setVerticalGroup(
            timeslotListTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeslotListTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout timeslotContentPanelLayout = new javax.swing.GroupLayout(timeslotContentPanel);
        timeslotContentPanel.setLayout(timeslotContentPanelLayout);
        timeslotContentPanelLayout.setHorizontalGroup(
            timeslotContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeslotContentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(timeslotContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeslotCrudOperations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timeslotListTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        timeslotContentPanelLayout.setVerticalGroup(
            timeslotContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeslotContentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timeslotCrudOperations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(timeslotListTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        timetableHomePanel.add(timeslotContentPanel, java.awt.BorderLayout.CENTER);

        contentPanel.add(timetableHomePanel, "timetableHomePanel");

        doctorHomePanel.setLayout(new java.awt.BorderLayout());

        doctorListTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "List of Doctors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor ID", "Name", "Gender", "Date of Birth", "Age", "Specialty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doctorTable.setForeground(new java.awt.Color(0, 0, 0));
        doctorTable.setRowHeight(40);
        doctorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(doctorTable);

        javax.swing.GroupLayout doctorListTablePanelLayout = new javax.swing.GroupLayout(doctorListTablePanel);
        doctorListTablePanel.setLayout(doctorListTablePanelLayout);
        doctorListTablePanelLayout.setHorizontalGroup(
            doctorListTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorListTablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        doctorListTablePanelLayout.setVerticalGroup(
            doctorListTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorListTablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addContainerGap())
        );

        doctorCrudPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Manage Doctors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        doctorCrudPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addDoctorBtn.setText("Add Doctor");
        addDoctorBtn.setBackground(new java.awt.Color(0, 153, 255));
        addDoctorBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addDoctorBtn.setFocusPainted(false);
        addDoctorBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addDoctorBtn.setForeground(new java.awt.Color(0, 0, 0));
        addDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDoctorBtnActionPerformed(evt);
            }
        });
        doctorCrudPanel.add(addDoctorBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 60, 150, 40));

        updateDoctorBtn.setText("Update Doctor");
        updateDoctorBtn.setBackground(new java.awt.Color(255, 153, 0));
        updateDoctorBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateDoctorBtn.setFocusPainted(false);
        updateDoctorBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateDoctorBtn.setForeground(new java.awt.Color(0, 0, 0));
        updateDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDoctorBtnActionPerformed(evt);
            }
        });
        doctorCrudPanel.add(updateDoctorBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 150, 150, 40));

        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 0, 0));
        jLabel28.setText("Doctor Name:");
        doctorCrudPanel.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        doctorNameTxtField.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        doctorNameTxtField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1)));
        doctorCrudPanel.add(doctorNameTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 230, 40));

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(0, 0, 0));
        jLabel29.setText("Gender:");
        doctorCrudPanel.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 70, -1, -1));

        doctorGenderBtnGroup.add(maleDoctorRadiotButton);
        maleDoctorRadiotButton.setText("Male");
        doctorCrudPanel.add(maleDoctorRadiotButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, -1, -1));

        doctorGenderBtnGroup.add(femaleDoctorRadioButton);
        femaleDoctorRadioButton.setText("Female");
        doctorCrudPanel.add(femaleDoctorRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 70, -1, -1));

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(0, 0, 0));
        jLabel30.setText("Date of Birth:");
        doctorCrudPanel.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, -1));

        doctorDOB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        doctorCrudPanel.add(doctorDOB, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 230, 40));

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(0, 0, 0));
        jLabel31.setText("Specialty:");
        doctorCrudPanel.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 170, -1, -1));

        specialtyTxtField.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        specialtyTxtField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1)));
        doctorCrudPanel.add(specialtyTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 160, 230, 40));

        deleteDoctorBtn.setText("Delete Doctor");
        deleteDoctorBtn.setBackground(new java.awt.Color(255, 0, 0));
        deleteDoctorBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteDoctorBtn.setFocusPainted(false);
        deleteDoctorBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteDoctorBtn.setForeground(new java.awt.Color(0, 0, 0));
        deleteDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDoctorBtnActionPerformed(evt);
            }
        });
        doctorCrudPanel.add(deleteDoctorBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 240, 150, 40));

        javax.swing.GroupLayout doctorContentPanelLayout = new javax.swing.GroupLayout(doctorContentPanel);
        doctorContentPanel.setLayout(doctorContentPanelLayout);
        doctorContentPanelLayout.setHorizontalGroup(
            doctorContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorContentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(doctorContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doctorListTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(doctorCrudPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1095, Short.MAX_VALUE))
                .addContainerGap())
        );
        doctorContentPanelLayout.setVerticalGroup(
            doctorContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorContentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(doctorCrudPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(doctorListTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        doctorHomePanel.add(doctorContentPanel, java.awt.BorderLayout.CENTER);

        contentPanel.add(doctorHomePanel, "doctorHomePanel");

        appointmentsHomePanel.setLayout(new java.awt.BorderLayout());

        appointmentsContentPanel.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(1107, 120));

        jLabel9.setText("Appointment Number:");
        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));

        appointmentNumberTxtField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1)));
        appointmentNumberTxtField.setEnabled(false);
        appointmentNumberTxtField.setForeground(new java.awt.Color(0, 0, 0));

        cancelAppointmentBtn.setText("Cancel Appointment");
        cancelAppointmentBtn.setBackground(new java.awt.Color(204, 0, 0));
        cancelAppointmentBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelAppointmentBtn.setFocusPainted(false);
        cancelAppointmentBtn.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        cancelAppointmentBtn.setForeground(new java.awt.Color(255, 255, 255));
        cancelAppointmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAppointmentBtnActionPerformed(evt);
            }
        });

        confirmAppointmentBtn.setText("Confirm Appointment");
        confirmAppointmentBtn.setBackground(new java.awt.Color(0, 153, 0));
        confirmAppointmentBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        confirmAppointmentBtn.setFocusPainted(false);
        confirmAppointmentBtn.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        confirmAppointmentBtn.setForeground(new java.awt.Color(255, 255, 255));
        confirmAppointmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmAppointmentBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(appointmentNumberTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 400, Short.MAX_VALUE)
                .addComponent(confirmAppointmentBtn)
                .addGap(18, 18, 18)
                .addComponent(cancelAppointmentBtn)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(appointmentNumberTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelAppointmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmAppointmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        appointmentsContentPanel.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "List of Booked Appointments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        appointmentListTable.setForeground(new java.awt.Color(0, 0, 0));
        appointmentListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Appointment No.", "Appointment Date", "Appointment Time", "Patient", "Doctor", "Visit Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentListTable.setRowHeight(40);
        appointmentListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentListTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(appointmentListTable);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1073, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        appointmentsContentPanel.add(jPanel3, java.awt.BorderLayout.CENTER);

        appointmentsHomePanel.add(appointmentsContentPanel, java.awt.BorderLayout.CENTER);

        contentPanel.add(appointmentsHomePanel, "appointmentsHomePanel");

        patientsMedicalHistoryHomePanel.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel8.setPreferredSize(new java.awt.Dimension(1107, 90));

        jLabel10.setText("Search:");
        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));

        medicalRecordFilterTxtField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1)));
        medicalRecordFilterTxtField.setForeground(new java.awt.Color(0, 0, 0));
        medicalRecordFilterTxtField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                medicalRecordFilterTxtFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(medicalRecordFilterTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(854, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(medicalRecordFilterTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel7.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Patient Medical History", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        patientsAppointmentHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Appointment No.", "Booked On", "Booking Date", "Booking Time", "Patient Name", "Doctor Name", "Visit Type", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientsAppointmentHistoryTable.setToolTipText("");
        patientsAppointmentHistoryTable.setRowHeight(40);
        jScrollPane4.setViewportView(patientsAppointmentHistoryTable);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1073, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel7.add(jPanel9, java.awt.BorderLayout.CENTER);

        patientsMedicalHistoryHomePanel.add(jPanel7, java.awt.BorderLayout.CENTER);

        contentPanel.add(patientsMedicalHistoryHomePanel, "patientsMedicalHistoryHomePanel");

        mainPanel.add(contentPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void timetableSidePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timetableSidePanelMousePressed
        Border loweredBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED, Color.lightGray, Color.BLACK);
        timetableSidePanel.setBorder(loweredBorder);
        swingUtils.panelChangeActionPerformed(evt, contentPanel, timetableSidePanel, "timetableHomePanel");
        setTitle("Timetable - AppointWell");
        fileUtils.populateTableFromFile(TIMESLOT_FILEPATH, timeslotTable);
    }//GEN-LAST:event_timetableSidePanelMousePressed

    private void timetableSidePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timetableSidePanelMouseReleased
        Border raisedBorder = BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.lightGray, Color.GRAY);
        timetableSidePanel.setBorder(raisedBorder);
    }//GEN-LAST:event_timetableSidePanelMouseReleased

    private void appointmentSidePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentSidePanelMousePressed
        Border loweredBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED, Color.lightGray, Color.BLACK);
        appointmentSidePanel.setBorder(loweredBorder);
        swingUtils.panelChangeActionPerformed(evt, contentPanel, appointmentSidePanel, "appointmentsHomePanel");
        setTitle("List of Booked Appointments - AppointWell");
    }//GEN-LAST:event_appointmentSidePanelMousePressed

    private void appointmentSidePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentSidePanelMouseReleased
        Border raisedBorder = BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.lightGray, Color.GRAY);
        appointmentSidePanel.setBorder(raisedBorder);
    }//GEN-LAST:event_appointmentSidePanelMouseReleased

    private void patientSidePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSidePanelMousePressed
        Border loweredBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED, Color.lightGray, Color.BLACK);
        patientSidePanel.setBorder(loweredBorder);
        swingUtils.panelChangeActionPerformed(evt, contentPanel, patientSidePanel, "patientsMedicalHistoryHomePanel");
        setTitle("Patients Medical History - AppointWell");
        populatePatientAppointmentHistoryTable();
    }//GEN-LAST:event_patientSidePanelMousePressed

    private void patientSidePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSidePanelMouseReleased
        Border raisedBorder = BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.lightGray, Color.GRAY);
        patientSidePanel.setBorder(raisedBorder);
    }//GEN-LAST:event_patientSidePanelMouseReleased

    private void doctorSidePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorSidePanelMousePressed
        Border loweredBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED, Color.lightGray, Color.BLACK);
        doctorSidePanel.setBorder(loweredBorder);
        swingUtils.panelChangeActionPerformed(evt, contentPanel, doctorSidePanel, "doctorHomePanel");
        setTitle("Doctors - AppointWell");
        doctorGenderBtnGroup.clearSelection();
    }//GEN-LAST:event_doctorSidePanelMousePressed

    private void doctorSidePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorSidePanelMouseReleased
        Border raisedBorder = BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.lightGray, Color.GRAY);
        doctorSidePanel.setBorder(raisedBorder);
    }//GEN-LAST:event_doctorSidePanelMouseReleased

    private void homeSidePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeSidePanelMousePressed
        Border loweredBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED, Color.lightGray, Color.BLACK);
        homeSidePanel.setBorder(loweredBorder);
        swingUtils.panelChangeActionPerformed(evt, contentPanel, homeSidePanel, "homePanel");
        setTitle("Staff Home Dashboard - AppointWell");
    }//GEN-LAST:event_homeSidePanelMousePressed

    private void homeSidePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeSidePanelMouseReleased
        Border raisedBorder = BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.lightGray, Color.GRAY);
        homeSidePanel.setBorder(raisedBorder);
    }//GEN-LAST:event_homeSidePanelMouseReleased

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        authManager.logout(this);
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void addTimeslotBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTimeslotBtnActionPerformed

        String appointmentDate = getAppointmentDate();
        LocalTime appointmentTime = getAppointmentTime();
        String availability = appointmentAvailabilityComboBox.getSelectedItem().toString();
        String doctor = getSelectedDoctor();
        
        Timeslot timeslot = new Timeslot(appointmentDate, appointmentTime, availability, doctor);
        
        boolean timeslotExists = dataValidation.validateDuplicateTimeslot(timeslot, TIMESLOT_FILEPATH);

        if (!validateTimeslotFields(appointmentDate, appointmentTime, doctor)) {
            JOptionPane.showMessageDialog(null, "One or more fields are blank", "Empty Field", JOptionPane.ERROR_MESSAGE);
        } else if (timeslotExists) {
            JOptionPane.showMessageDialog(null, "A timeslot already exist for the specified date and time", "Duplicated Timeslots", JOptionPane.ERROR_MESSAGE);
        } else {
            timeslotFileHandler.createTimeslot(timeslot, timeslotTable);
            JOptionPane.showMessageDialog(this, "Successfully New Timeslot to Timetable.");
            swingUtils.clearFields(timeslotCrudPanel);
            swingUtils.setComboBoxDefaultValue("-- Select a Doctor --", doctorComboBox);
            populateTimeslotAvailabilityComboBox();
            fileUtils.populateComboBoxFromFile(DOCTOR_FILEPATH, doctorComboBox, 1);
        }
    }//GEN-LAST:event_addTimeslotBtnActionPerformed

    private void updateTimeslotBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTimeslotBtnActionPerformed

        String appointmentDate = getAppointmentDate();
        LocalTime appointmentTime = getAppointmentTime();
        String availability = appointmentAvailabilityComboBox.getSelectedItem().toString();
        String doctorName = getSelectedDoctor();
        
        int[] columnIndices = { 1, 2, 3, 4 };
        Object[] data = {appointmentDate, appointmentTime, availability, doctorName};
        
        int selectedRow = timeslotTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to delete", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            List<String> timeslots = Files.readAllLines(Paths.get(TIMESLOT_FILEPATH));
            List<String> appointments = Files.readAllLines(Paths.get(APPOINTMENT_FILEPATH));
            String[] selectedTimeslot = timeslots.get(selectedRow + 1).split(",\\s*");
            for (int i = appointments.size() - 1; i >= 1; i--) {
                String[] appointment = appointments.get(i).split(",\\s*");
                if (appointment[4].equals(selectedTimeslot[1]) && appointment[5].equals(selectedTimeslot[2])
                        && appointment[3].equals(selectedTimeslot[4])) {
                    if (!appointment[7].equals("CANCELLED")) {
                        dialogsUI.showErrorDialog("Record exist. Cancel the existing appointment to continue editing this timeslot.");
                        swingUtils.clearFields(timeslotCrudOperations);
                        populateTimeslotAvailabilityComboBox();
                        populateDoctorComboBox();
                        return;
                    }
                }
            }
            swingUtils.updateTable(timeslotTable, this, columnIndices, data);
            timeslotFileHandler.updateTimeslot(timeslotTable);
            JOptionPane.showMessageDialog(this, "Timetable Updated Successfully");
            swingUtils.clearFields(timeslotCrudOperations);
            populateTimeslotAvailabilityComboBox();
            populateDoctorComboBox();
        } catch (IOException e) {
            e.printStackTrace(System.out);
        }
    }//GEN-LAST:event_updateTimeslotBtnActionPerformed
    
    private void timeslotTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeslotTableMouseClicked

        // Get the selected row index
        int rowIndex = timeslotTable.getSelectedRow();

        // Get the date value from the table model
        String appointmentDate = (String) timeslotTable.getValueAt(rowIndex, 1);

        // Convert the date format from "yyyy-MM-dd" to "MMM d, yyyy"
        SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date parsedDate = null;

        try {
            parsedDate = inputFormat.parse(appointmentDate);
        } catch (ParseException ex) {
            // Handle the exception or rethrow it
            JOptionPane.showMessageDialog(this, "Unable to parse date", "Error Parsing Date", JOptionPane.ERROR_MESSAGE);
        }

        // Get the time value from the table model
        Object appointmentTimeObj = timeslotTable.getValueAt(rowIndex, 2);
        String appointmentTime;
        
        switch (appointmentTimeObj) {
            case LocalTime localTime -> {
                // If the appointmentTime is a LocalTime object, format it as a String
                DateTimeFormatter outputTimeFormat = DateTimeFormatter.ofPattern("HH:mm");
                appointmentTime = localTime.format(outputTimeFormat);
            }
            case String timeString -> // If the appointmentTime is a String object, use it directly
                appointmentTime = timeString;
            case default -> {
                // Handle the case where the appointmentTime value is unexpected
                JOptionPane.showMessageDialog(this, "Unexpected time value type", "Error Parsing Time", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Get the avaiability value from the table model
        String availability = (String) timeslotTable.getValueAt(rowIndex, 3);

        // Get the doctor name value from the table model
        String doctorName = (String) timeslotTable.getValueAt(rowIndex, timeslotTable.getColumnCount() - 1);

        // Set the input field values
        appointmentDatePicker.setDate(parsedDate);
        appointmentTimePicker.setText(appointmentTime);
        appointmentAvailabilityComboBox.setSelectedItem(availability);
        doctorComboBox.setSelectedItem(doctorName);
    }//GEN-LAST:event_timeslotTableMouseClicked

    private void addDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDoctorBtnActionPerformed

        DoctorFileHandler newDoctor = new DoctorFileHandler();
        
        String doctorName = doctorNameTxtField.getText();
        String doctorGender = getDoctorGender();
        String doctorBirthdate = getBirthdate();
        String doctorSpecialty = specialtyTxtField.getText();
        int doctorAge = getDoctorAge();

        String[] doctorVarargs = {doctorName, doctorGender, doctorBirthdate, doctorSpecialty};
        
        if (!inputValidation.validationEmptyFields(doctorVarargs)) {
            JOptionPane.showMessageDialog(null, "One or more fields are blank", "Empty Field", JOptionPane.ERROR_MESSAGE);
        } else {
            Doctor doctor = new Doctor(doctorName, doctorGender, doctorBirthdate, doctorAge, doctorSpecialty);
            newDoctor.createDoctor(doctor, doctorTable);
            JOptionPane.showMessageDialog(this, "New Doctor Added Successfully.");
            swingUtils.clearFields(doctorCrudPanel);
            doctorGenderBtnGroup.clearSelection();
            populateDoctorComboBox();
        }
    }//GEN-LAST:event_addDoctorBtnActionPerformed

    private void updateDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDoctorBtnActionPerformed
        
        String doctorName = doctorNameTxtField.getText();
        String doctorGender = getDoctorGender();
        String doctorBirthdate = getBirthdate();
        String doctorSpecialty = specialtyTxtField.getText();
        int doctorAge = getDoctorAge();

        int[] columnIndices = new int[] { 1, 2, 3, 4, 5 };
        String[] varargs = { doctorName, doctorGender, doctorBirthdate, doctorSpecialty };
        Object[] data = {doctorName, doctorGender, doctorBirthdate, doctorAge, doctorSpecialty};
        
        if (!inputValidation.validationEmptyFields(varargs)) {
            JOptionPane.showMessageDialog(null, "One or more fields are blank", "Empty Field", JOptionPane.ERROR_MESSAGE);
        } else {
            swingUtils.updateTable(doctorTable, this, columnIndices, data);
            doctorFileHandler.updateDoctor(doctorTable);
            JOptionPane.showMessageDialog(this, "Successfully Updated Doctor Info");   
        }
    }//GEN-LAST:event_updateDoctorBtnActionPerformed

    private void doctorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorTableMouseClicked

        // Get the selected row index
        int rowIndex = doctorTable.getSelectedRow();

        // Get the date value from the table model
        String doctorName = (String) doctorTable.getValueAt(rowIndex, 1);
        String doctorGender = (String) doctorTable.getValueAt(rowIndex, 2);
        
        String doctorBirthdate = (String) doctorTable.getValueAt(rowIndex, 3);
        
        SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date parsedDate = null;

        try {
            parsedDate = inputFormat.parse(doctorBirthdate);
        } catch (ParseException ex) {
            // Handle the exception or rethrow it
            JOptionPane.showMessageDialog(this, "Unable to parse date", "Error Parsing Date", JOptionPane.ERROR_MESSAGE);
        }

        String doctorSpecialty = (String) doctorTable.getValueAt(rowIndex, doctorTable.getColumnCount() - 1);

        // Set the input field values
        doctorNameTxtField.setText(doctorName);
        if (doctorGender.equalsIgnoreCase("Male")) {
            doctorGenderBtnGroup.setSelected(maleDoctorRadiotButton.getModel(), true);
        } else if (doctorGender.equalsIgnoreCase("Female")) {
            doctorGenderBtnGroup.setSelected(femaleDoctorRadioButton.getModel(), true);
        }
        doctorDOB.setDate(parsedDate);
        specialtyTxtField.setText(doctorSpecialty);
    }//GEN-LAST:event_doctorTableMouseClicked

    private void deleteTimeslotBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTimeslotBtnActionPerformed
      
        timeslotFileHandler.deleteTimeslot(timeslotTable);
        swingUtils.clearFields(timeslotCrudOperations);
        populateTimeslotAvailabilityComboBox();
        populateDoctorComboBox();
    }//GEN-LAST:event_deleteTimeslotBtnActionPerformed

    private void appointmentListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentListTableMouseClicked
        // Get the selected row index
        int rowIndex = appointmentListTable.getSelectedRow();

        // Get appointment booking number from the table model
        String appointmentBookingNumber = (String) appointmentListTable.getValueAt(rowIndex, 1);
        
        // Set the input field values
        appointmentNumberTxtField.setText(appointmentBookingNumber);
    }//GEN-LAST:event_appointmentListTableMouseClicked

    private void confirmAppointmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmAppointmentBtnActionPerformed
        
        fileUtils.updateDoctorAvailabilityStatus(APPOINTMENT_FILEPATH, TIMESLOT_FILEPATH, appointmentListTable, "CONFIRMED");
        
        populateBookedAppointmentListTable();
        populateTodayAppointmentsTable();
        
        appointmentNumberTxtField.setText("");
    }//GEN-LAST:event_confirmAppointmentBtnActionPerformed

    private void cancelAppointmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAppointmentBtnActionPerformed
        
        int result = dialogsUI.showConfirmDialog("Are you sure you want to cancel this patient's appointment?");
        
        if (result != JOptionPane.YES_OPTION) {
            return;
        }
        
        fileUtils.updateAppointmentStatus(APPOINTMENT_FILEPATH, appointmentListTable, "CANCELLED", true);
        
        populateBookedAppointmentListTable();
        
        appointmentNumberTxtField.setText("");
    }//GEN-LAST:event_cancelAppointmentBtnActionPerformed

    private void medicalRecordFilterTxtFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_medicalRecordFilterTxtFieldKeyReleased
        searchFilter(medicalRecordFilterTxtField.getText());
    }//GEN-LAST:event_medicalRecordFilterTxtFieldKeyReleased

    private void deleteDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDoctorBtnActionPerformed
        
        int result = dialogsUI.showConfirmDialog("Are you sure to want to remove this doctor from the system?");
        
        if (result != JOptionPane.YES_OPTION) {
            return;
        }
        
        fileUtils.deleteDoctor(DOCTOR_FILEPATH, TIMESLOT_FILEPATH, APPOINTMENT_FILEPATH, doctorTable);
        swingUtils.clearFields(doctorCrudPanel);
        doctorGenderBtnGroup.clearSelection();
        populateDoctorComboBox();
    }//GEN-LAST:event_deleteDoctorBtnActionPerformed
    
    // Get data related to Doctor
    private String getDoctorGender() {
        maleDoctorRadiotButton.setActionCommand("Male");
        femaleDoctorRadioButton.setActionCommand("Female");
        ButtonModel selectedButton = doctorGenderBtnGroup.getSelection();

        if (selectedButton != null) {
            return selectedButton.getActionCommand();
        } else {
            return null;
        }
    }
    
    private String getBirthdate() {
        Date selectedDate = doctorDOB.getDate();
        String formattedDate;

        if (selectedDate != null) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            formattedDate = dateFormat.format(selectedDate);
        } else {
            formattedDate = null;
        }

        return formattedDate;
    }
    
    private int getDoctorAge() {
        Date selectedDate = doctorDOB.getDate();
        int age = 0;
        if (selectedDate != null) {
            LocalDate birthDate = selectedDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate currentDate = LocalDate.now();
            age = Period.between(birthDate, currentDate).getYears();
        }

        return age;
    }
    // End of getting data from Doctor file
    
    // Get values related to adding a new Timeslot
    private String getAppointmentDate() {
        Date selectedDate = appointmentDatePicker.getDate();
        String formattedDate;

        if (selectedDate != null) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            formattedDate = dateFormat.format(selectedDate);
        } else {
            formattedDate = null;
        }

        return formattedDate;
    }
    
    private LocalTime getAppointmentTime() {
        LocalTime selectedTime = appointmentTimePicker.getTime();
        return selectedTime;
    }
    
    private String getSelectedDoctor() {
        String selectedDoctor = doctorComboBox.getSelectedItem().toString();
        return selectedDoctor;
    }
    // End of getting values to add new Timeslot
    
    // Methods to populate tables
    private void populateTimeslotAvailabilityComboBox() {
        
        swingUtils.setComboBoxDefaultValue("-- Select Availability --", appointmentAvailabilityComboBox);
        appointmentAvailabilityComboBox.addItem("Available");
        appointmentAvailabilityComboBox.addItem("Unavailable");
    }
    
    private void populateDoctorComboBox() {
        
        swingUtils.setComboBoxDefaultValue("-- Select a Doctor --", doctorComboBox);
        fileUtils.populateComboBoxFromFile(DOCTOR_FILEPATH, doctorComboBox, 1);
    }
    
    private void populateTodayAppointmentsTable() {
        
        int[] currentAppointmentIndices = { 1, 2, 3, 5, 6 };
        fileUtils.displayCurrentAppointments(APPOINTMENT_FILEPATH, currentAppointmentsTable, "CONFIRMED", currentAppointmentIndices);
    }
    
    private void populateBookedAppointmentListTable() {
        
        int[] bookedAppointmentsIndices = { 1, 5, 6, 3, 4, 7 };
        String status = "BOOKED";
        fileUtils.populateAppointmentsTable(APPOINTMENT_FILEPATH, appointmentListTable, status, bookedAppointmentsIndices);
    }
    
    private void populatePatientAppointmentHistoryTable() {
        
        int[] appointmentHistoryIndices = { 1, 2, 5, 6, 3, 4, 7, 8 };
        
        String[] statusNames = { "CONFIRMED", "CANCELLED" }; 
        
        fileUtils.populateMedicalHistoryTable(APPOINTMENT_FILEPATH, patientsAppointmentHistoryTable, statusNames[0], statusNames[1], appointmentHistoryIndices);
    }
    // End of Methods used to populate tables
    
    // Custom validation method used only in this file
    public boolean validateTimeslotFields(String appointmentDate, LocalTime appointmentTime, String doctor) {
        
        String comboBoxPlaceholder = "-- Select a Doctor --";
        
        return (appointmentDate != null && appointmentTime != null && !doctor.equals(comboBoxPlaceholder));
    }
    // End of Custom validation method used only in this file
    
    private void searchFilter(String searchTerm) {
        
        DefaultTableModel tableModel = (DefaultTableModel) patientsAppointmentHistoryTable.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<>(tableModel);
        patientsAppointmentHistoryTable.setRowSorter(tableRowSorter);
        if (searchTerm.trim().length() == 0) {
            tableRowSorter.setRowFilter(null);
        } else {
            RowFilter<DefaultTableModel, Object> rowFilter = RowFilter.regexFilter("(?i)" + searchTerm, 5);
            tableRowSorter.setRowFilter(rowFilter);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new StaffForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDoctorBtn;
    private javax.swing.JButton addTimeslotBtn;
    private javax.swing.JComboBox<String> appointmentAvailabilityComboBox;
    private com.toedter.calendar.JDateChooser appointmentDatePicker;
    private javax.swing.JTable appointmentListTable;
    private javax.swing.JTextField appointmentNumberTxtField;
    private javax.swing.JPanel appointmentSidePanel;
    private com.github.lgooddatepicker.components.TimePicker appointmentTimePicker;
    private javax.swing.JPanel appointmentsContentPanel;
    private javax.swing.JPanel appointmentsHomePanel;
    private javax.swing.JButton cancelAppointmentBtn;
    private javax.swing.JButton confirmAppointmentBtn;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JTable currentAppointmentsTable;
    private javax.swing.JButton deleteDoctorBtn;
    private javax.swing.JButton deleteTimeslotBtn;
    private javax.swing.JComboBox<String> doctorComboBox;
    private javax.swing.JPanel doctorContentPanel;
    private javax.swing.JPanel doctorCrudPanel;
    private com.toedter.calendar.JDateChooser doctorDOB;
    private javax.swing.ButtonGroup doctorGenderBtnGroup;
    private javax.swing.JPanel doctorHomePanel;
    private javax.swing.JPanel doctorListTablePanel;
    private javax.swing.JTextField doctorNameTxtField;
    private javax.swing.JPanel doctorSidePanel;
    private javax.swing.JTable doctorTable;
    private javax.swing.JRadioButton femaleDoctorRadioButton;
    private javax.swing.JPanel homePanel;
    private javax.swing.JPanel homeSidePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton maleDoctorRadiotButton;
    private javax.swing.JTextField medicalRecordFilterTxtField;
    private javax.swing.JPanel patientSidePanel;
    private javax.swing.JTable patientsAppointmentHistoryTable;
    private javax.swing.JPanel patientsMedicalHistoryHomePanel;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JLabel sidebarMenuLabel;
    private javax.swing.JTextField specialtyTxtField;
    private javax.swing.JPanel timeslotContentPanel;
    private javax.swing.JPanel timeslotCrudOperations;
    private javax.swing.JPanel timeslotCrudPanel;
    private javax.swing.JPanel timeslotListTable;
    private javax.swing.JTable timeslotTable;
    private javax.swing.JPanel timetableHomePanel;
    private javax.swing.JPanel timetableSidePanel;
    private javax.swing.JPanel topBarPanel;
    private javax.swing.JButton updateDoctorBtn;
    private javax.swing.JButton updateTimeslotBtn;
    // End of variables declaration//GEN-END:variables
}
