package com.apu.appointwell.gui;

import com.apu.appointwell.classes.appointment.Appointment;
import com.apu.appointwell.classes.appointment.AppointmentFileHandler;
import com.apu.appointwell.classes.auth.AuthenticationManager;
import com.apu.appointwell.classes.utils.DialogsUI;
import com.apu.appointwell.classes.utils.ImageUtils;
import com.apu.appointwell.classes.utils.SwingUtils;
import com.apu.appointwell.classes.utils.FileUtils;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;

/**
 *
 * @author Alex
 */
public class PatientForm extends javax.swing.JFrame {
    
    private static final String APPOINTMENT_FILEPATH = "D:\\AppointWell\\src\\main\\java\\com\\apu\\appointwell\\data\\appointments.txt";
    private static final String TIMESLOT_FILEPATH = "D:\\AppointWell\\src\\main\\java\\com\\apu\\appointwell\\data\\timeslots.txt";
    private static final String DOCTOR_FILEPATH = "D:\\AppointWell\\src\\main\\java\\com\\apu\\appointwell\\data\\doctors.txt";
    
    private final String patientName;
    
    private final Set<String> commonStatusFiler = Set.of("BOOKED", "CONFIRMED");

    // Instantiate utility classes
    ImageUtils imageUtils = new ImageUtils();
    FileUtils fileUtils = new FileUtils();
    SwingUtils swingUtils = new SwingUtils();
    DialogsUI dialogsUI = new DialogsUI();
    
    // Instantiate authentication management class
    AuthenticationManager authManager = new AuthenticationManager();
    
    // Instantiate various file handler classes
    AppointmentFileHandler appointmentFileHandler = new AppointmentFileHandler();
    
    /**
     * Creates new form Staff
     * @param name
     */
    public PatientForm(String name) {
        patientName = name;
        initComponents();
        initCustomComponents();
    }
    
    private void initCustomComponents() {
        imageUtils.setFrameIcon(this, "/icons/medical-appointment.png");
        
        // Populate Tables
        populateHomePanelAppointmentTable();
        populateUpcomingAppointmentsTable();
        populateAppointmentHistoryTable();
        populateDoctorsTable();
        
        // Center table values
        swingUtils.centerTableValues(upcomingAppointmentsTable);
        swingUtils.centerTableValues(appointmentHistoryTable);
        swingUtils.centerTableValues(doctorListTable);
        swingUtils.centerTableValues(todayAppointmentTable);
        
        // Populate values for Swing components
        populateVisitTypeComboBox();
        populateAvailableAppointments();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sidePanel = new javax.swing.JPanel();
        homeSidePanel = new javax.swing.JPanel();
        sidebarMenuLabel = new javax.swing.JLabel();
        myAppointmentSidePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bookAppointmentSidePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        doctorListSidePanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        medicalHistorySidePanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        topBarPanel = new javax.swing.JPanel();
        logoutBtn = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();
        homePanel = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        todayAppointmentTable = new javax.swing.JTable();
        myAppointmentPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        appointmentNumberTxtField = new javax.swing.JTextField();
        cancelAppointmentBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        upcomingAppointmentsTable = new javax.swing.JTable();
        appointmentFormPanel = new javax.swing.JPanel();
        appointmentFormContentPanel = new javax.swing.JPanel();
        appointmentDetailsPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        patientNameTxtField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        doctorComboBox = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        visitTypeComboBox = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        appointmentDatePicker = new com.toedter.calendar.JDateChooser();
        bookAppointmentBtn = new javax.swing.JButton();
        availableAppointmentTimeComboBox = new javax.swing.JComboBox<>();
        changeNamePanel = new javax.swing.JPanel();
        changeNameLabel = new javax.swing.JLabel();
        appointmentHistoryPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        appointmentHistoryTable = new javax.swing.JTable();
        doctorListPanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        doctorListTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Patient Home Dashboard - AppointWell");
        setPreferredSize(new java.awt.Dimension(1280, 751));

        sidePanel.setBackground(new java.awt.Color(204, 255, 255));
        sidePanel.setPreferredSize(new java.awt.Dimension(200, 720));

        homeSidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.lightGray, null));
        homeSidePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homeSidePanel.setOpaque(false);
        homeSidePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                homeSidePanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                homeSidePanelMouseReleased(evt);
            }
        });
        homeSidePanel.setLayout(new java.awt.BorderLayout());

        sidebarMenuLabel.setFont(new java.awt.Font("Verdana", 1, 20)); // NOI18N
        sidebarMenuLabel.setForeground(new java.awt.Color(0, 0, 0));
        sidebarMenuLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sidebarMenuLabel.setText("HOME");
        homeSidePanel.add(sidebarMenuLabel, java.awt.BorderLayout.CENTER);

        myAppointmentSidePanel.setBackground(new java.awt.Color(204, 255, 204));
        myAppointmentSidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.lightGray, null));
        myAppointmentSidePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        myAppointmentSidePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                myAppointmentSidePanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                myAppointmentSidePanelMouseReleased(evt);
            }
        });
        myAppointmentSidePanel.setLayout(new java.awt.BorderLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/my-appointment-icon.png"))); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(48, 85));
        myAppointmentSidePanel.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("MY APPOINTMENT");
        myAppointmentSidePanel.add(jLabel2, java.awt.BorderLayout.CENTER);

        bookAppointmentSidePanel.setBackground(new java.awt.Color(204, 255, 204));
        bookAppointmentSidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.lightGray, null));
        bookAppointmentSidePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bookAppointmentSidePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                bookAppointmentSidePanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bookAppointmentSidePanelMouseReleased(evt);
            }
        });
        bookAppointmentSidePanel.setLayout(new java.awt.BorderLayout());

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/appointment-icon.png"))); // NOI18N
        jLabel3.setPreferredSize(new java.awt.Dimension(48, 85));
        bookAppointmentSidePanel.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("BOOK APPOINTMENT");
        bookAppointmentSidePanel.add(jLabel4, java.awt.BorderLayout.CENTER);

        doctorListSidePanel.setBackground(new java.awt.Color(204, 255, 204));
        doctorListSidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.lightGray, null));
        doctorListSidePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        doctorListSidePanel.setPreferredSize(new java.awt.Dimension(100, 85));
        doctorListSidePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                doctorListSidePanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                doctorListSidePanelMouseReleased(evt);
            }
        });
        doctorListSidePanel.setLayout(new java.awt.BorderLayout());

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/doctor-icon.png"))); // NOI18N
        jLabel5.setPreferredSize(new java.awt.Dimension(48, 85));
        doctorListSidePanel.add(jLabel5, java.awt.BorderLayout.PAGE_START);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("DOCTOR");
        doctorListSidePanel.add(jLabel6, java.awt.BorderLayout.CENTER);

        medicalHistorySidePanel.setBackground(new java.awt.Color(204, 255, 204));
        medicalHistorySidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.lightGray, null));
        medicalHistorySidePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        medicalHistorySidePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                medicalHistorySidePanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                medicalHistorySidePanelMouseReleased(evt);
            }
        });
        medicalHistorySidePanel.setLayout(new java.awt.BorderLayout());

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/appointment-icon.png"))); // NOI18N
        jLabel7.setPreferredSize(new java.awt.Dimension(48, 85));
        medicalHistorySidePanel.add(jLabel7, java.awt.BorderLayout.PAGE_START);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("MEDICAL HISTORY");
        medicalHistorySidePanel.add(jLabel8, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homeSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(myAppointmentSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(bookAppointmentSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
            .addComponent(doctorListSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(medicalHistorySidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addComponent(homeSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(myAppointmentSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(bookAppointmentSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(doctorListSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(medicalHistorySidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        getContentPane().add(sidePanel, java.awt.BorderLayout.LINE_START);

        mainPanel.setLayout(new java.awt.BorderLayout());

        topBarPanel.setBackground(new java.awt.Color(204, 255, 204));
        topBarPanel.setPreferredSize(new java.awt.Dimension(1097, 80));

        logoutBtn.setFont(new java.awt.Font("Verdana", 1, 20)); // NOI18N
        logoutBtn.setForeground(new java.awt.Color(0, 0, 0));
        logoutBtn.setText("Logout");
        logoutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutBtn.setFocusPainted(false);
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topBarPanelLayout = new javax.swing.GroupLayout(topBarPanel);
        topBarPanel.setLayout(topBarPanelLayout);
        topBarPanelLayout.setHorizontalGroup(
            topBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topBarPanelLayout.createSequentialGroup()
                .addContainerGap(929, Short.MAX_VALUE)
                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
        topBarPanelLayout.setVerticalGroup(
            topBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topBarPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        mainPanel.add(topBarPanel, java.awt.BorderLayout.PAGE_START);

        contentPanel.setLayout(new java.awt.CardLayout());

        homePanel.setLayout(new java.awt.BorderLayout());

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Today's Appointments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        todayAppointmentTable.setForeground(new java.awt.Color(0, 0, 0));
        todayAppointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Appointment No.", "Appointment Date", "Appointment Time", "Doctor", "Visit Type", "Appointment Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        todayAppointmentTable.setRowHeight(40);
        jScrollPane4.setViewportView(todayAppointmentTable);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1063, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        homePanel.add(jPanel9, java.awt.BorderLayout.CENTER);

        contentPanel.add(homePanel, "homePanel");

        myAppointmentPanel.setLayout(new java.awt.BorderLayout());

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Appointment Number:");

        appointmentNumberTxtField.setForeground(new java.awt.Color(0, 0, 0));
        appointmentNumberTxtField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1)));
        appointmentNumberTxtField.setEnabled(false);

        cancelAppointmentBtn.setBackground(new java.awt.Color(204, 0, 0));
        cancelAppointmentBtn.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        cancelAppointmentBtn.setForeground(new java.awt.Color(255, 255, 255));
        cancelAppointmentBtn.setText("Cancel Appointment");
        cancelAppointmentBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelAppointmentBtn.setFocusPainted(false);
        cancelAppointmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAppointmentBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(appointmentNumberTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 574, Short.MAX_VALUE)
                .addComponent(cancelAppointmentBtn)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(appointmentNumberTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cancelAppointmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        myAppointmentPanel.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setPreferredSize(new java.awt.Dimension(1080, 560));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Upcoming Appointments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        upcomingAppointmentsTable.setForeground(new java.awt.Color(0, 0, 0));
        upcomingAppointmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Appointment No.", "Doctor Name", "Appointment Date", "Appointment Time", "Appointment Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        upcomingAppointmentsTable.setRowHeight(40);
        upcomingAppointmentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                upcomingAppointmentsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(upcomingAppointmentsTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1063, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        myAppointmentPanel.add(jPanel2, java.awt.BorderLayout.CENTER);

        contentPanel.add(myAppointmentPanel, "myAppointmentPanel");

        appointmentFormPanel.setLayout(new java.awt.BorderLayout());

        appointmentDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Appointment Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Full Name:");

        patientNameTxtField.setForeground(new java.awt.Color(0, 0, 0));
        patientNameTxtField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1)));
        patientNameTxtField.setEnabled(false);
        patientNameTxtField.setPreferredSize(new java.awt.Dimension(71, 35));

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("Doctor:");

        doctorComboBox.setForeground(new java.awt.Color(0, 0, 0));
        doctorComboBox.setEnabled(false);

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 0));
        jLabel21.setText("Visit Type:");

        visitTypeComboBox.setForeground(new java.awt.Color(0, 0, 0));

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 0, 0));
        jLabel22.setText("Timeslot:");

        appointmentDatePicker.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        bookAppointmentBtn.setBackground(new java.awt.Color(102, 153, 255));
        bookAppointmentBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bookAppointmentBtn.setForeground(new java.awt.Color(255, 255, 255));
        bookAppointmentBtn.setText("Book Appointment");
        bookAppointmentBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bookAppointmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAppointmentBtnActionPerformed(evt);
            }
        });

        availableAppointmentTimeComboBox.setEnabled(false);

        changeNamePanel.setLayout(new java.awt.BorderLayout());

        changeNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        changeNameLabel.setForeground(new java.awt.Color(0, 153, 204));
        changeNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        changeNameLabel.setText("Change Name");
        changeNameLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        changeNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changeNameLabelMouseClicked(evt);
            }
        });
        changeNamePanel.add(changeNameLabel, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout appointmentDetailsPanelLayout = new javax.swing.GroupLayout(appointmentDetailsPanel);
        appointmentDetailsPanel.setLayout(appointmentDetailsPanelLayout);
        appointmentDetailsPanelLayout.setHorizontalGroup(
            appointmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentDetailsPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(appointmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookAppointmentBtn)
                    .addGroup(appointmentDetailsPanelLayout.createSequentialGroup()
                        .addGroup(appointmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel14)
                            .addComponent(jLabel20))
                        .addGap(33, 33, 33)
                        .addGroup(appointmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, appointmentDetailsPanelLayout.createSequentialGroup()
                                .addComponent(appointmentDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(availableAppointmentTimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, appointmentDetailsPanelLayout.createSequentialGroup()
                                .addComponent(doctorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(1, 1, 1))
                            .addComponent(patientNameTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentDetailsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(33, 33, 33)
                        .addComponent(visitTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGap(15, 15, 15)
                .addComponent(changeNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(515, Short.MAX_VALUE))
        );
        appointmentDetailsPanelLayout.setVerticalGroup(
            appointmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentDetailsPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(appointmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appointmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(patientNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(changeNamePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(appointmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appointmentDetailsPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(availableAppointmentTimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(appointmentDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(appointmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(appointmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(visitTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addComponent(bookAppointmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout appointmentFormContentPanelLayout = new javax.swing.GroupLayout(appointmentFormContentPanel);
        appointmentFormContentPanel.setLayout(appointmentFormContentPanelLayout);
        appointmentFormContentPanelLayout.setHorizontalGroup(
            appointmentFormContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentFormContentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appointmentDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        appointmentFormContentPanelLayout.setVerticalGroup(
            appointmentFormContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentFormContentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appointmentDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        appointmentFormPanel.add(appointmentFormContentPanel, java.awt.BorderLayout.CENTER);

        contentPanel.add(appointmentFormPanel, "appointmentFormPanel");

        appointmentHistoryPanel.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Appointment History", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        appointmentHistoryTable.setForeground(new java.awt.Color(0, 0, 0));
        appointmentHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Appointment No.", "Booked On", "Appointment Date", "Appointment Time", "Visit Type", "Appointment Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentHistoryTable.setRowHeight(40);
        jScrollPane2.setViewportView(appointmentHistoryTable);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1063, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        appointmentHistoryPanel.add(jPanel5, java.awt.BorderLayout.CENTER);

        contentPanel.add(appointmentHistoryPanel, "appointmentHistoryPanel");

        doctorListPanel.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "List of Doctors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        doctorListTable.setForeground(new java.awt.Color(0, 0, 0));
        doctorListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Name", "Gender", "Age", "Specialty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doctorListTable.setRowHeight(40);
        jScrollPane3.setViewportView(doctorListTable);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1063, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        doctorListPanel.add(jPanel7, java.awt.BorderLayout.CENTER);

        contentPanel.add(doctorListPanel, "doctorListPanel");

        mainPanel.add(contentPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        authManager.logout(this);
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void myAppointmentSidePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myAppointmentSidePanelMousePressed
        Border loweredBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED, Color.lightGray, Color.BLACK);
        myAppointmentSidePanel.setBorder(loweredBorder);
        swingUtils.panelChangeActionPerformed(evt, contentPanel, myAppointmentSidePanel, "myAppointmentPanel");
        setTitle("My Appointments - AppointWell");
        populateUpcomingAppointmentsTable();
    }//GEN-LAST:event_myAppointmentSidePanelMousePressed

    private void myAppointmentSidePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myAppointmentSidePanelMouseReleased
        Border raisedBorder = BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.lightGray, Color.GRAY);
        myAppointmentSidePanel.setBorder(raisedBorder);
    }//GEN-LAST:event_myAppointmentSidePanelMouseReleased

    private void bookAppointmentSidePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookAppointmentSidePanelMousePressed
        Border loweredBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED, Color.lightGray, Color.BLACK);
        bookAppointmentSidePanel.setBorder(loweredBorder);
        swingUtils.panelChangeActionPerformed(evt, contentPanel, bookAppointmentSidePanel, "appointmentFormPanel");
        setTitle("Book Appointment - AppointWell");
        swingUtils.clearFields(appointmentDetailsPanel);
        patientNameTxtField.setEnabled(false);
        patientNameTxtField.setText(patientName);
        availableAppointmentTimeComboBox.setEnabled(false);
        doctorComboBox.setEnabled(false);
        populateVisitTypeComboBox();
    }//GEN-LAST:event_bookAppointmentSidePanelMousePressed

    private void bookAppointmentSidePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookAppointmentSidePanelMouseReleased
        Border raisedBorder = BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.lightGray, Color.GRAY);
        bookAppointmentSidePanel.setBorder(raisedBorder);
    }//GEN-LAST:event_bookAppointmentSidePanelMouseReleased

    private void doctorListSidePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorListSidePanelMousePressed
        Border loweredBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED, Color.lightGray, Color.BLACK);
        doctorListSidePanel.setBorder(loweredBorder);
        swingUtils.panelChangeActionPerformed(evt, contentPanel, doctorListSidePanel, "doctorListPanel");
        setTitle("Doctors - AppointWell");
    }//GEN-LAST:event_doctorListSidePanelMousePressed

    private void doctorListSidePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorListSidePanelMouseReleased
        Border raisedBorder = BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.lightGray, Color.GRAY);
        doctorListSidePanel.setBorder(raisedBorder);
    }//GEN-LAST:event_doctorListSidePanelMouseReleased

    private void medicalHistorySidePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medicalHistorySidePanelMousePressed
        Border loweredBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED, Color.lightGray, Color.BLACK);
        medicalHistorySidePanel.setBorder(loweredBorder);
        swingUtils.panelChangeActionPerformed(evt, contentPanel, medicalHistorySidePanel, "appointmentHistoryPanel");
        setTitle("Appointments History - AppointWell");
        populateAppointmentHistoryTable();
    }//GEN-LAST:event_medicalHistorySidePanelMousePressed

    private void medicalHistorySidePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medicalHistorySidePanelMouseReleased
        Border raisedBorder = BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.lightGray, Color.GRAY);
        medicalHistorySidePanel.setBorder(raisedBorder);
    }//GEN-LAST:event_medicalHistorySidePanelMouseReleased

    private void changeNameLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeNameLabelMouseClicked
        patientNameTxtField.setEnabled(true);
    }//GEN-LAST:event_changeNameLabelMouseClicked

    private void bookAppointmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAppointmentBtnActionPerformed

        String patientFullname = patientNameTxtField.getText();
        String appointmentDate = getAppointmentDate();
        LocalTime appointmentTime = getAppointmentTime();
        String doctorName = getSelectedDoctor();
        String visitType = getAppointmentVisitType();

        if (!validateAppointmentFormFields(patientFullname, appointmentDate, appointmentTime, doctorName, visitType)) {
            JOptionPane.showMessageDialog(this, "One or more fields are blank", "Empty Field", JOptionPane.ERROR_MESSAGE);
        } else {
            Appointment appointment = new Appointment(appointmentDate, appointmentTime, doctorName, patientFullname, visitType);
            appointmentFileHandler.createAppointment(appointment, upcomingAppointmentsTable);
            JOptionPane.showMessageDialog(this, "Appointment Placed Successfully. Our staff will get back to your appointment as soon as possible");
            swingUtils.clearFields(appointmentDetailsPanel);
            patientNameTxtField.setText(patientFullname);
            patientNameTxtField.setEnabled(false);
            availableAppointmentTimeComboBox.setEnabled(false);
            doctorComboBox.setEnabled(false);
            populateVisitTypeComboBox();
        }
    }//GEN-LAST:event_bookAppointmentBtnActionPerformed

    private void upcomingAppointmentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upcomingAppointmentsTableMouseClicked
        
        // Get the selected row index
        int rowIndex = upcomingAppointmentsTable.getSelectedRow();

        // Get appointment booking number from the table model
        String appointmentBookingNumber = (String) upcomingAppointmentsTable.getValueAt(rowIndex, 1);
        
        // Set the input field values
        appointmentNumberTxtField.setText(appointmentBookingNumber);
    }//GEN-LAST:event_upcomingAppointmentsTableMouseClicked

    private void homeSidePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeSidePanelMousePressed
        Border loweredBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED, Color.lightGray, Color.BLACK);
        homeSidePanel.setBorder(loweredBorder);
        swingUtils.panelChangeActionPerformed(evt, contentPanel, homeSidePanel, "homePanel");
        setTitle("Patient Home - AppointWell");
    }//GEN-LAST:event_homeSidePanelMousePressed

    private void homeSidePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeSidePanelMouseReleased
        Border raisedBorder = BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.lightGray, Color.GRAY);
        homeSidePanel.setBorder(raisedBorder);
    }//GEN-LAST:event_homeSidePanelMouseReleased

    private void cancelAppointmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAppointmentBtnActionPerformed
        
        int row = upcomingAppointmentsTable.getSelectedRow();
        
        if (row == -1) {
            dialogsUI.showErrorDialog("Please select a row!");
            return;
        }
        
        int result = dialogsUI.showConfirmDialog("Are you sure you want to cancel this appointment?");
        
        if (result != JOptionPane.YES_OPTION) {
            return;
        }
        
        fileUtils.updateAppointmentStatus(APPOINTMENT_FILEPATH, upcomingAppointmentsTable, "CANCELLED", true);
        
        populateUpcomingAppointmentsTable();
        populateAppointmentHistoryTable();
        populateHomePanelAppointmentTable();
        
        appointmentNumberTxtField.setText("");
    }//GEN-LAST:event_cancelAppointmentBtnActionPerformed
    
    private String getAppointmentDate() {
        Date selectedDate = appointmentDatePicker.getDate();
        String formattedDate;

        if (selectedDate != null) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            formattedDate = dateFormat.format(selectedDate);
        } else {
            formattedDate = null;
        }

        return formattedDate;
    }
    
    private LocalTime getAppointmentTime() {       

        String comboBoxPlaceholder = "-- Choose a Time --";
        Object selectedTime = availableAppointmentTimeComboBox.getSelectedItem();
        DateTimeFormatter timeFormatPattern = DateTimeFormatter.ofPattern("h:mm a");
        LocalTime formattedTime;

        if (selectedTime != null && !selectedTime.equals(comboBoxPlaceholder)) {
            String timeString = selectedTime.toString();
            formattedTime = LocalTime.parse(timeString, timeFormatPattern);
        } else {
            formattedTime = null;
        }
        
        return formattedTime;
    }
    
    private String getSelectedDoctor() {       
        Object selectedItem = doctorComboBox.getSelectedItem();
        if (selectedItem != null) {
            String selectedDoctor = selectedItem.toString();
            return selectedDoctor;
        }
        return null;
    }
    
    private String getAppointmentVisitType() {
        String visitType = visitTypeComboBox.getSelectedItem().toString();
        return visitType;
    }

    // Methods used by InitCustomComponents
    private void populateVisitTypeComboBox() {
        swingUtils.setComboBoxDefaultValue("-- Select Appointment Type --", visitTypeComboBox);
        String[] items = { "First Visit", "Follow-up", "Consultation", "Diagnostic Test" };
        
        for (String item : items) {
            visitTypeComboBox.addItem(item);
        }
    }
  
    public void populateAvailableAppointments() {
               
        // Attach a change listener to the JDateChooser component
        appointmentDatePicker.addPropertyChangeListener("date", evt -> {
            // Get the selected date
            Date selectedDate = appointmentDatePicker.getDate();

            // Enable the combo boxes
            availableAppointmentTimeComboBox.setEnabled(true);

            // Read the text file and get the list of available timeslots and doctors for the selected date
            List<String> availableTimeSlots = new ArrayList<>();
            List<String> availableDoctors = new ArrayList<>();

            try (BufferedReader br = new BufferedReader(new FileReader(TIMESLOT_FILEPATH))) {
                String line;
                // Skip the first line that contains the header
                br.readLine();

                while ((line = br.readLine()) != null) {
                    String[] records = line.split(", ");
                    String appointmentDateString = records[1];
                    String appointmentTimeString = records[2];
                    String availability = records[3];
                    String doctorName = records[4];

                    // Check if the appointment date matches the selected date and the slot is available
                    if (appointmentDateString.equals(getDateString(selectedDate)) && availability.equals("Available")) {
                        // Format the time string and add it to the list of available timeslots
                        String formattedTime = convertTimeFormat(appointmentTimeString);
                        availableTimeSlots.add(formattedTime);
                        availableDoctors.add(doctorName);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace(System.out);
            }

            // Populate the combo boxes with the available timeslots and doctors
            swingUtils.setComboBoxDefaultValue("-- Choose a Time --", availableAppointmentTimeComboBox);
            addValuesToComboBox(availableTimeSlots, availableAppointmentTimeComboBox);

            // Attach a change listener to the available appointment combo box
            availableAppointmentTimeComboBox.addActionListener(e -> {
                // Get the selected appointment time
                String selectedTime = (String) availableAppointmentTimeComboBox.getSelectedItem();

                doctorComboBox.setEnabled(true);

                // Filter the available doctors based on the selected time
                List<String> availableDoctorsForSelectedTime = new ArrayList<>();
                for (int i = 0; i < availableTimeSlots.size(); i++) {
                    if (availableTimeSlots.get(i).equals(selectedTime)) {
                        availableDoctorsForSelectedTime.add(availableDoctors.get(i));
                        // Populate the doctor combo box with the available doctors for the selected time
                        swingUtils.setComboBoxDefaultValue("-- Select a Doctor --", doctorComboBox);
                        addValuesToComboBox(availableDoctorsForSelectedTime, doctorComboBox);
                    }
                }
            });
        });
    }
    // End of Methods used by InitCustomComponents
    
    // Custom code to be used in this file only 
    private String convertTimeFormat(String data) {
        LocalTime time = LocalTime.parse(data);
        return time.format(DateTimeFormatter.ofPattern("h:mm a"));
    }

    private void addValuesToComboBox(List<String> values, JComboBox<String> comboBoxName) {
        
        for (String value : values) {
            comboBoxName.addItem(value);
        }
    }
    
    private String getDateString(Date date) {
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        return formatter.format(date);
    }
    
    private void populateHomePanelAppointmentTable() {
        
        int[] todayAppointmentIndices = { 1, 5, 6, 4, 7, 8 };
        fileUtils.displayCurrentAppointments(patientName, APPOINTMENT_FILEPATH, todayAppointmentTable, "CONFIRMED", todayAppointmentIndices);
    }
    
    private void populateUpcomingAppointmentsTable() {
        
        int[] upcomingAppointmentIndices = { 1, 4, 5, 7, 8 };
        fileUtils.populateAppointmentsTable(patientName, APPOINTMENT_FILEPATH, upcomingAppointmentsTable, commonStatusFiler, upcomingAppointmentIndices);
    }
    
    private void populateAppointmentHistoryTable() {
        
        int[] appointmentHistoryIndices = { 1, 2, 4, 5, 6, 8 };
        
        String[] statusNames = { "CONFIRMED", "CANCELLED" }; 
        
        fileUtils.populateMedicalHistoryTable(patientName, APPOINTMENT_FILEPATH, appointmentHistoryTable, statusNames[0], statusNames[1], appointmentHistoryIndices);
    }
    
    private void populateDoctorsTable() {
        
        int[] doctorsIndices = { 0, 1, 2, 4, 5 };
        fileUtils.populateTableFromFile(DOCTOR_FILEPATH, doctorListTable, doctorsIndices);
    }
    // End of custom code to be used in this file only
    
    // Custom validation method used only in this file
    public boolean validateAppointmentFormFields(String name, String date, LocalTime time, String doctor, String visitType) {
        
        String[] comboBoxPlaceholder = { "-- Select a Doctor --", "-- Select Appointment Type --" };
        
        boolean isFormValid = true;
        
        if (name.isEmpty() || date == null | time == null || visitType == null) {
            isFormValid = false;
        } else if (doctor.equals(comboBoxPlaceholder[0]) || visitType.equals(comboBoxPlaceholder[1])) {
            isFormValid = false;
        }
        
        return isFormValid;
    }
    // End of Custom validation method used only in this file
    
    /**
     * @param args the command line arguments
     * @param patientName
     */
    public void main(String args[], String patientName) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PatientForm(patientName).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser appointmentDatePicker;
    private javax.swing.JPanel appointmentDetailsPanel;
    private javax.swing.JPanel appointmentFormContentPanel;
    private javax.swing.JPanel appointmentFormPanel;
    private javax.swing.JPanel appointmentHistoryPanel;
    private javax.swing.JTable appointmentHistoryTable;
    private javax.swing.JTextField appointmentNumberTxtField;
    private javax.swing.JComboBox<String> availableAppointmentTimeComboBox;
    private javax.swing.JButton bookAppointmentBtn;
    private javax.swing.JPanel bookAppointmentSidePanel;
    private javax.swing.JButton cancelAppointmentBtn;
    private javax.swing.JLabel changeNameLabel;
    private javax.swing.JPanel changeNamePanel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JComboBox<String> doctorComboBox;
    private javax.swing.JPanel doctorListPanel;
    private javax.swing.JPanel doctorListSidePanel;
    private javax.swing.JTable doctorListTable;
    private javax.swing.JPanel homePanel;
    private javax.swing.JPanel homeSidePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel medicalHistorySidePanel;
    private javax.swing.JPanel myAppointmentPanel;
    private javax.swing.JPanel myAppointmentSidePanel;
    private javax.swing.JTextField patientNameTxtField;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JLabel sidebarMenuLabel;
    private javax.swing.JTable todayAppointmentTable;
    private javax.swing.JPanel topBarPanel;
    private javax.swing.JTable upcomingAppointmentsTable;
    private javax.swing.JComboBox<String> visitTypeComboBox;
    // End of variables declaration//GEN-END:variables
}
